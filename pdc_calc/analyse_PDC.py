# fc_pdc_calc: Calculates the time-ordered solutions of ultrafast frequency
# conversion / parametric down-conversion and evaluates the process parameters.
#     Copyright (C) 2013  Andreas Christ
# 
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.


#! /usr/bin/env python
""" This script analyses the calculated PDC data by calling individual
analysis scripts. This renders the whole analysis manageable and
enables an easy extension with further scripts. 

One has to specify the path to the hdf5 file and the directory where 
the analysis data should be saved. In this directory a new folder
with the analysis data will be created.

Call via:
python analyse_PDC_data.py $PATH_TO_HDF5_FILE $SAVE_DIRECTORY
"""

## Notes:
# Usually this would be done via a bash script, but writing it in python
# makes it platform agnostic.
#
# The scripts are supplied in an order so that the later ones depend on 
# data generated by previous scripts.
#
# Each script generates a new directory in the save directory storing the
# data and generated figures

import sys
import os

## Parse the supplied paths
# path_to_hdf5_file has to be the full path to the hdf5 file.
# save_directory is the path where a directory with the name
# directory_name is created to store the results


parameters = sys.argv[1:]

path_to_hdf5_file = parameters[0]
save_directory = parameters[1]

(dummy, sep, directory_name) = path_to_hdf5_file.rpartition("/")

directory_name = directory_name.rstrip(".h5")

##############
## Analysis ##
##############

print "#########################"
print "#########################"
print "### Starting analysis ###"
print "#########################"
print "#########################"

# Create analysis directory named after the hdf5 file.
# Extract the raw data and process properties from the hdf5 file. 
# (In principle the hdf5 file can afterwards be deleted.)
os.system("python analysis_scripts/export_raw_data_from_hdf5.py " + str(path_to_hdf5_file) \
        + " " + str(save_directory))

# Construct the U and V matrices of the solution from the raw data and
# plot the data
os.system("python analysis_scripts/construct_U_and_V_matrices.py " + str(save_directory) \
        + "/"+ str(directory_name) + "/")

# Check if the obtained U and V matrices form a canonical transformation.
os.system("python analysis_scripts/check_U_and_V_matrices.py " + str(save_directory) \
        + "/"+ str(directory_name) + "/")

# Perform an SVD of the U and V matrices and plot the modes and amplitudes
os.system("python analysis_scripts/SVD_of_U_and_V.py " + str(save_directory)+ "/" \
        + str(directory_name) + "/")

# Check if the modes and amplitudes from the SVD from a canonical transformation
os.system("python analysis_scripts/check_SVD.py " + str(save_directory)+ "/" \
        + str(directory_name) + "/")

# Generate the plots used in the paper
os.system("python analysis_scripts/paper_plot.py " + str(save_directory)+ "/" \
        + str(directory_name) + "/")

# Extended analysis of the differences between the solutions at different
# positions inside the medium. This is very useful to check the z-integration
# routine. 
#os.system("python analysis_scripts/extended_diff_analysis.py " + str(path_to_hdf5_file) \
#        + " " + str(save_directory) + '/' + str(directory_name) + "/")


print "#########################"
print "### Finished analysis ###"
print "#########################"
